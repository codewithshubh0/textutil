{"version":3,"sources":["Navbar.js","TextForm.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","className","mode","href","title","type","id","onClick","change","role","htmlFor","TextForm","useState","text","setText","mod","value","onChange","event","target","style","backgroundColor","color","rows","newtext","toUpperCase","toLowerCase","App","setmode","document","body","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"oMAkCeA,MA/Bf,SAAgBC,GAEZ,OACI,mCACC,qBAAKC,UAAS,yCAAoCD,EAAME,KAA1C,eAAqDF,EAAME,MAAzE,SACP,sBAAKD,UAAU,kBAAf,UACE,mBAAGA,UAAU,eAAeE,KAAK,IAAjC,SAAsCH,EAAMI,QAC5C,0BAAUH,UAAU,mBAAmBI,KAAK,WAAW,mBAAiB,WAAW,iBAAe,0BAA0B,gBAAc,yBAAyB,gBAAc,QAAQ,aAAW,sBAApM,SACE,sBAAMJ,UAAU,4BAElB,qBAAKA,UAAU,2BAA2BK,GAAG,yBAA7C,SACE,oBAAIL,UAAU,oCAAd,SACE,oBAAIA,UAAU,WAAd,SACE,mBAAGA,UAAU,eAAe,eAAa,OAAOE,KAAK,IAArD,wBAQN,sBAAKF,UAAS,sCAA8C,UAAbD,EAAME,KAAe,OAAO,SAA3E,UACF,uBAAOD,UAAU,mBAAmBM,QAASP,EAAMQ,OAAQH,KAAK,WAAWI,KAAK,SAASH,GAAG,2BAC5F,uBAAOL,UAAU,mBAAmBS,QAAQ,yBAA5C,oCCoBaC,MA3Cf,SAAkBX,GAElB,MAAqBY,mBAAS,IAA9B,mBAAMC,EAAN,KAAWC,EAAX,KAwBI,OAEG,qBAAKb,UAAU,YAAf,SACE,sBAAKA,UAAS,oBAA2B,UAAZD,EAAMe,IAAc,OAAO,SAAxD,UACA,iDACG,0BAAUd,UAAU,eAAgBe,MAAOH,EAAMI,SA3B3C,SAACC,GAChBJ,EAAQI,EAAMC,OAAOH,QA0B4DI,MAAO,CAACC,gBAA4B,UAAZrB,EAAMe,IAAc,QAAQ,OAAOO,MAAkB,UAAZtB,EAAMe,IAAc,QAAQ,SAAWT,GAAG,8BAA8BiB,KAAK,MAAe,uBACrO,wBAAQtB,UAAS,oCAA2C,UAAZD,EAAMe,IAAc,QAAQ,QAAUK,MAAO,CAACC,gBAA4B,UAAZrB,EAAMe,IAAc,OAAO,SAAWR,QAxB/I,WACb,IAAIiB,EAASX,EAAKY,cAClBX,EAAQU,IAsBA,kCAEA,wBAAQvB,UAAS,oCAA2C,UAAZD,EAAMe,IAAc,QAAQ,QAAUK,MAAO,CAACC,gBAA4B,UAAZrB,EAAMe,IAAc,OAAO,SAAaR,QArBhJ,WACd,IAAIiB,EAASX,EAAKa,cAClBZ,EAAQU,IAmBA,wCCEGG,MA1Bf,WAEE,MAAuBf,mBAAS,SAAhC,mBAAOV,EAAP,KAAa0B,EAAb,KAaA,OAGG,qCACA,cAAC,EAAD,CAAQxB,MAAO,YAAYF,KAAOA,EAAMM,OAftB,WACV,UAAPN,GACD0B,EAAQ,QACRC,SAASC,KAAKV,MAAMC,gBAAgB,QACpCQ,SAASzB,MAAM,0BAEfwB,EAAQ,SACRC,SAASC,KAAKV,MAAMC,gBAAgB,QACpCQ,SAASzB,MAAM,6BAShB,cAAC,EAAD,CAAUW,IAAKb,QCtBJ6B,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFb,SAASc,eAAe,SAM1BZ,K","file":"static/js/main.36c14147.chunk.js","sourcesContent":["import React from 'react'\r\n\r\n\r\nfunction Navbar(props){\r\n\r\n    return(\r\n        <>\r\n         <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n  <div className=\"container-fluid\">\r\n    <a className=\"navbar-brand\" href=\"#\">{props.title}</a>\r\n    <buthrefn className=\"navbar-hrefggler\" type=\"buthrefn\" data-bs-hrefggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"hrefggle navigation\">\r\n      <span className=\"navbar-hrefggler-icon\"></span>\r\n    </buthrefn>\r\n    <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n      <ul className=\"navbar-nav me-auhref mb-2 mb-lg-0\">\r\n        <li className=\"nav-item\">\r\n          <a className=\"nav-a active\" aria-current=\"page\" href=\"#\">Home</a>\r\n        </li>\r\n      \r\n        \r\n       \r\n      </ul>\r\n    \r\n    </div>\r\n    <div className={`form-check form-switch text-${props.mode==='light'?'dark':'light'}`}>\r\n  <input className=\"form-check-input\" onClick={props.change} type=\"checkbox\" role=\"switch\" id=\"flexSwitchCheckDefault\"/>\r\n  <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">change mode</label>\r\n</div>\r\n  </div>\r\n</nav>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Navbar;","import React,{useState} from 'react';\r\n\r\n\r\nfunction TextForm(props){\r\n\r\nconst[text,setText] =useState(\"\");\r\n\r\nconst changedtext=(event)=>{\r\n   setText(event.target.value);\r\n};\r\n\r\nconst changetoup=()=>{\r\n    let newtext =text.toUpperCase();\r\n    setText(newtext);\r\n };\r\n\r\n const changetolp=()=>{\r\n    let newtext =text.toLowerCase();\r\n    setText(newtext);\r\n };\r\n const cleartext=()=>{\r\n   let newtext =\" \";\r\n   setText(newtext);\r\n};\r\n\r\n// dark mode \r\n\r\n\r\n\r\n    return (\r\n     \r\n       <div className=\"container\" >\r\n         <div className={`mb-3 text-${props.mod==='light'?'dark':'light'}`}>\r\n         <h1 >ENTER YOUR TEXT</h1>\r\n            <textarea className=\"form-control\"  value={text} onChange={changedtext} style={{backgroundColor:props.mod==='light'?'white':'grey',color:props.mod==='light'?'black':'white'}}  id=\"exampleFormControlTextarea1\" rows=\"3\"></textarea><br/>\r\n            <button className={`btn btn-primary mx-2 text-${props.mod==='light'?'light':'dark'}`} style={{backgroundColor:props.mod==='light'?'blue':'white'}}  onClick={changetoup}>convert to uppercase</button> \r\n        \r\n            <button className={`btn btn-primary mx-2 text-${props.mod==='light'?'light':'dark'}`} style={{backgroundColor:props.mod==='light'?'blue':'white'}}    onClick={changetolp}>convert to lowercase</button>\r\n         \r\n            \r\n        </div>\r\n        </div>\r\n       \r\n        \r\n    )\r\n}\r\nexport default TextForm;","import './App.css';\nimport Navbar from './Navbar';\nimport TextForm from './TextForm';\nimport React,{useState} from 'react';\n// import About from './About';\n// import {\n//   BrowserRouter as Router,\n//   Switch,\n//   Route,\n//   Link\n// } from \"react-router-dom\";\n\n\nfunction App() {\n\n  const [mode ,setmode] =useState('light');\n\n  const clicktochange =()=>{\n   if(mode==='light'){\n     setmode('dark');\n     document.body.style.backgroundColor='black';\n     document.title='TEXTUTILS - Dark Mode';\n   }else{\n     setmode('light');\n     document.body.style.backgroundColor='white';\n     document.title='TEXTUTILS - Light Mode';\n    }\n  };\n  return (\n  \n   \n     <>\n     <Navbar title =\"TEXTUTILS\" mode ={mode} change={clicktochange} />\n     \n    <TextForm mod={mode} />\n       </>\n   );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}